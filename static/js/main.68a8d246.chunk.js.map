{"version":3,"sources":["components/counters-list-item/counters-list-item.js","components/counters-list-item/index.js","components/counters-list/counters-list.js","redux/actions.js","components/counters-list/index.js","components/app/App.js","components/app/index.js","serviceWorker.js","redux/reducer.js","redux/store.js","index.js"],"names":["CountersListItem","props","console","log","className","counter","counterName","onClick","decrement","counterId","counterValue","increment","reset","remove","mapDispatchToProps","counterInc","dispatch","type","payload","counterDec","counterRes","counterRemove","CountersList","connect","state","countersList","map","el","key","App","Boolean","window","location","hostname","match","initialState","updateCounterValue","arg","newList","removeCounterFromList","newCountersList","filter","reducer","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.68a8d246.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './counters-list-item.css';\r\n\r\nfunction CountersListItem(props) {\r\n    console.log('props in Items', props);\r\n\r\n    return (\r\n        <div className='card m-1'>\r\n            <div className='card-body'>\r\n                <div className='row'>\r\n                    <div className='col-sm-4'>{props.counter.counterName} </div>\r\n                    <div className='col-sm-3'>\r\n                        <button className='btn btn-info mr-1'\r\n                                onClick={() => props.decrement(props.counter.counterId)}>-</button>\r\n                        {props.counter.counterValue}\r\n                        <button className='btn btn-danger ml-1'\r\n                                onClick={() => props.increment(props.counter.counterId)}>+\r\n                        </button>\r\n                    </div>\r\n                    <div className='col-sm-4'>\r\n                        <button className='btn btn-warning mr-1'\r\n                                onClick={() => props.reset(props.counter.counterId)}>Reset</button>\r\n                        <button className='btn btn-secondary mr-1'>Edit</button>\r\n                        <button className='btn btn-danger mr-1'\r\n                                onClick={() => props.remove(props.counter.counterId)}>Delete</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CountersListItem;","import CountersListItem from \"./counters-list-item\";\r\n\r\nexport default CountersListItem;","import React from \"react\";\r\nimport CountersListItem from \"../counters-list-item\";\r\nimport {counterDecOne, counterDelete, counterIncOne, counterReset} from \"../../redux/actions\";\r\nimport {connect} from \"react-redux\";\r\n\r\nfunction CountersList(props) {\r\n    console.log('List countersList', props.countersList);\r\n    return (\r\n        <>\r\n            {\r\n                props.countersList.map((el) => <CountersListItem\r\n                        key={el.counterId}\r\n                        counter={el}\r\n                        increment={props.counterInc}\r\n                        decrement={props.counterDec}\r\n                        reset={props.counterRes}\r\n                        remove={props.counterRemove}\r\n                    />\r\n                )\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    countersList: state.countersList,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    counterInc: counterIncOne,\r\n    counterDec: counterDecOne,\r\n    counterRes: counterReset,\r\n    counterRemove: counterDelete\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CountersList);","export function counterIncOne(counterId) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'COUNTER_INC_ONE', payload: counterId})\r\n    }\r\n}\r\n\r\nexport function counterDecOne(counterId) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'COUNTER_DEC_ONE', payload: counterId})\r\n    }\r\n}\r\n\r\nexport function counterReset(counterId) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'COUNTER_RESET', payload: counterId})\r\n    }\r\n}\r\n\r\nexport function counterDelete(counterId) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'COUNTER_DELETE', payload: counterId})\r\n    }\r\n}","import CountersList from \"./counters-list\";\r\n\r\nexport default CountersList;","import React from 'react';\nimport './App.css';\nimport CountersList from \"../counters-list\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <CountersList/>\n        </div>\n    );\n}\n\nexport default App;\n","import App from \"./App\";\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n    countersList: [\r\n        {counterId: 97, counterName: '1st counter', counterValue: 1},\r\n        {counterId: 98, counterName: '2d counter', counterValue: 2},\r\n        {counterId: 99, counterName: '3d counter', counterValue: 3}\r\n    ],\r\n\r\n};\r\n\r\nconst updateCounterValue = (state, counterId, arg) => {\r\n    const newList = [...state.countersList.map(el => {\r\n        if (el.counterId === counterId) {\r\n            if (arg === 'reset') {\r\n                return {...el, counterValue: 0}\r\n            } else\r\n                return {...el, counterValue: el.counterValue + arg}\r\n\r\n        } else {\r\n            return {...el}\r\n        }\r\n    })];\r\n    return {...state, countersList: newList}\r\n};\r\n\r\nconst removeCounterFromList = (state, counterId) => {\r\n    const newCountersList = state.countersList.filter(el => el.counterId !== counterId);\r\n    return {...state, countersList: newCountersList}\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'COUNTER_INC_ONE':\r\n            return updateCounterValue(state, action.payload, +1);\r\n\r\n        case 'COUNTER_DEC_ONE':\r\n            return updateCounterValue(state, action.payload, -1);\r\n\r\n        case 'COUNTER_RESET':\r\n            return updateCounterValue(state, action.payload, 'reset');\r\n\r\n        case 'COUNTER_DELETE':\r\n            return removeCounterFromList(state, action.payload);\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import {createStore, applyMiddleware} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport reducer from './reducer';\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    composeWithDevTools(applyMiddleware(thunk)),\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from \"./components/app\";\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}