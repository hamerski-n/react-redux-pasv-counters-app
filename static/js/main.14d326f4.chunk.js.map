{"version":3,"sources":["components/counters-list-item/counters-list-item.js","components/counters-list-item/index.js","redux/actions.js","components/counters-list/counters-list.js","components/counters-list/index.js","components/delete-confirmation-modal/confirmation-delete.js","components/delete-confirmation-modal/index.js","components/add-counter-form/add-counter-form.js","components/add-counter-form/index.js","components/counters-total/counters-total.js","components/app/App.js","components/app/index.js","serviceWorker.js","redux/reducer.js","redux/store.js","index.js"],"names":["CountersListItem","props","useState","counter","counterName","newName","setNewName","className","type","value","disabled","isVisibleEditButton","onChange","e","target","onClick","decrement","counterId","counterValue","increment","reset","isVisibleSaveButton","save","edit","removeConfirm","counterAdd","dispatch","payload","mapDispatchToProps","counterInc","counterDec","counterRes","counterDeleteConfirm","editCounterName","saveCounterName","CountersList","connect","state","countersList","deleteConfirm","map","el","key","counterDelete","counterDeleteCancel","ConfirmationDelete","confirmCounter","isDisabledDeleteConfirmationButton","setIsDisabledDeleteConfirmationButton","Modal","isOpen","Boolean","name","toggle","ModalHeader","ModalBody","Input","inputText","trim","toLowerCase","ModalFooter","Button","color","id","AddCounterForm","setName","setCounterValue","placeholder","alert","isNaN","Number","countersResetAll","total","countersTotalValue","reduce","acc","cur","App","window","location","hostname","match","initialState","updateCounterValue","arg","newList","counterResetAll","removeCounterFromList","newCountersList","filter","addNewCounter","min","max","push","Math","ceil","floor","random","newCounterName","console","log","reducer","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.14d326f4.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport './counters-list-item.css';\r\n\r\nfunction CountersListItem(props) {\r\n    const [newName, setNewName] = useState(props.counter.counterName);\r\n    return (\r\n        <div className='card m-3'>\r\n            <div className='card-body'>\r\n                <div className='row'>\r\n                    <input type='text' className='col-sm-4'\r\n                           value={newName}\r\n                           disabled={props.counter.isVisibleEditButton}\r\n                           onChange={e => setNewName(e.target.value)}/>\r\n                    <div className='col-sm-3'>\r\n                        <button className='btn btn-info mr-1'\r\n                                onClick={() => props.decrement(props.counter.counterId)}>-\r\n                        </button>\r\n                        {props.counter.counterValue}\r\n                        <button className='btn btn-info ml-1'\r\n                                onClick={() => props.increment(props.counter.counterId)}>+\r\n                        </button>\r\n                    </div>\r\n                    <div className='col-sm-4'>\r\n                        <button className='btn btn-warning mr-1'\r\n                                onClick={() => props.reset(props.counter.counterId)}>Reset\r\n                        </button>\r\n                        {(() => {\r\n                            if (props.counter.isVisibleSaveButton) {\r\n                                return <button className='btn btn-primary mr-1'\r\n                                               onClick={() => props.save(props.counter.counterId, newName)}\r\n                                >Save</button>\r\n                            } else {\r\n                                return <button className='btn btn-secondary mr-1'\r\n                                               onClick={() => props.edit(props.counter.counterId)}>Edit</button>\r\n                            }\r\n                        })()}\r\n                        <button className='btn btn-danger mr-1'\r\n                                onClick={() => props.removeConfirm(props.counter)}>Delete\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CountersListItem;\r\n\r\n","import CountersListItem from \"./counters-list-item\";\r\n\r\nexport default CountersListItem;","export function counterIncOne(counterId) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'COUNTER_INC_ONE', payload: counterId})\r\n    }\r\n}\r\n\r\nexport function counterDecOne(counterId) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'COUNTER_DEC_ONE', payload: counterId})\r\n    }\r\n}\r\n\r\nexport function counterReset(counterId) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'COUNTER_RESET', payload: counterId})\r\n    }\r\n}\r\n\r\nexport function counterResetAll() {\r\n    return (dispatch) => {\r\n        dispatch({type: 'COUNTER_RESET_ALL'})\r\n    }\r\n}\r\n\r\nexport function countersTotal() {\r\n    return (dispatch) => {\r\n        dispatch({type: 'COUNTERS_TOTAL'})\r\n    }\r\n}\r\n\r\nexport function counterDeleteConfirm(counter) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'COUNTER_DELETE_CONFIRM', payload: counter})\r\n    }\r\n}\r\n\r\nexport function counterDelete(counterId) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'COUNTER_DELETE', payload: counterId})\r\n    }\r\n}\r\n\r\nexport function counterDeleteCancel(counterId) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'COUNTER_DELETE_CANCEL', payload: counterId})\r\n    }\r\n}\r\n\r\nexport function counterAdd(counterName, counterValue) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'COUNTER_ADD', payload: {counterName, counterValue}})\r\n    }\r\n}\r\n\r\nexport function editCounterName(counterId) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'COUNTER_EDIT_NAME', payload: counterId})\r\n    }\r\n}\r\n\r\nexport function saveCounterName(counterId,counterName) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'COUNTER_SAVE_NAME', payload: {counterId,counterName}})\r\n    }\r\n}\r\n\r\n","import React from \"react\";\r\nimport CountersListItem from \"../counters-list-item\";\r\nimport {\r\n    counterDecOne,\r\n    counterDeleteConfirm,\r\n    counterIncOne,\r\n    counterReset,\r\n    editCounterName,\r\n    saveCounterName\r\n} from \"../../redux/actions\";\r\nimport {connect} from \"react-redux\";\r\n\r\nfunction CountersList(props) {\r\n    return (\r\n        <>\r\n            {\r\n                props.countersList.map((el) => <CountersListItem\r\n                        key={el.counterId}\r\n                        counter={el}\r\n                        increment={props.counterInc}\r\n                        decrement={props.counterDec}\r\n                        reset={props.counterRes}\r\n                        removeConfirm={props.counterDeleteConfirm}\r\n                        edit={props.editCounterName}\r\n                        save={props.saveCounterName}\r\n                    />\r\n                )\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    countersList: state.countersList,\r\n    deleteConfirm: state.deleteConfirm\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    counterInc: counterIncOne,\r\n    counterDec: counterDecOne,\r\n    counterRes: counterReset,\r\n    counterDeleteConfirm: counterDeleteConfirm,\r\n    editCounterName: editCounterName,\r\n    saveCounterName: saveCounterName\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CountersList);","import CountersList from \"./counters-list\";\r\n\r\nexport default CountersList;","import React, {useState} from 'react';\r\nimport {Button, Modal, ModalHeader, ModalBody, ModalFooter} from 'reactstrap';\r\nimport Input from \"reactstrap/es/Input\";\r\nimport {counterDelete, counterDeleteCancel} from \"../../redux/actions\";\r\nimport {connect} from \"react-redux\";\r\n\r\nfunction ConfirmationDelete(props) {\r\n\r\n    const [isDisabledDeleteConfirmationButton, setIsDisabledDeleteConfirmationButton] = useState(true);\r\n\r\n    const modalConfirmationUserInputChange = (e) => {\r\n    const inputText = e.target.value;\r\n    setIsDisabledDeleteConfirmationButton( inputText.trim().toLowerCase() !== props.confirmCounter.name.trim().toLowerCase());\r\n    };\r\n\r\n    const deleteButtonClick = () => {\r\n        props.counterDelete(props.confirmCounter.id);\r\n        setIsDisabledDeleteConfirmationButton(true);\r\n    };\r\n\r\n    const cancelButtonClick = () => {\r\n        props.counterDeleteCancel();\r\n        setIsDisabledDeleteConfirmationButton(true);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Modal isOpen={Boolean(props.confirmCounter.name)} toggle={props.counterDeleteCancel}>\r\n                <ModalHeader>Delete confirmation</ModalHeader>\r\n                <ModalBody>\r\n                    Enter counter name <strong>{props.confirmCounter.name}</strong> to delete it\r\n                    <Input onChange={modalConfirmationUserInputChange}/>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"danger\"\r\n                            disabled={isDisabledDeleteConfirmationButton}\r\n                            onClick={deleteButtonClick}\r\n                    >Delete</Button>{' '}\r\n                    <Button color=\"secondary\"\r\n                            onClick={cancelButtonClick}\r\n                    >Cancel</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    countersList: state.countersList,\r\n    confirmCounter: state.confirmCounter,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    counterDelete: counterDelete,\r\n    counterDeleteCancel: counterDeleteCancel\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmationDelete);","import ConfirmationDelete from \"./confirmation-delete\";\r\n\r\nexport default ConfirmationDelete;","import React, {useState} from \"react\";\r\nimport {counterAdd} from \"../../redux/actions\";\r\nimport {connect} from \"react-redux\";\r\n\r\nfunction AddCounterForm(props) {\r\n\r\n    const [name, setName] = useState('');\r\n    const [counterValue, setCounterValue] = useState('');\r\n\r\n    const onSubmit = () => {\r\n        if (name === '') {\r\n            alert('Please add a counter name')\r\n        }\r\n        else if(isNaN(+counterValue)){\r\n            alert('PLease add as a Counter value')\r\n        }\r\n        else{\r\n            props.counterAdd(name, Number(counterValue));\r\n            setName('');\r\n            setCounterValue('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"input-group m-3 mr-8 \">\r\n            <input type=\"text\" className=\"form-control col-sm-9\" placeholder=\"Counter name\"\r\n                   value={name} onChange={e => setName(e.target.value)}/>\r\n            <input type=\"text\" className=\"form-control col-sm-3\" placeholder=\"Counter value\"\r\n                   value={counterValue} onChange={e => setCounterValue(e.target.value)}/>\r\n            <div className=\"input-group-append pr-3 mr-3\">\r\n                <button className=\"btn btn-primary\" type=\"button\"\r\n                        onClick={() => onSubmit(name, counterValue)}>Add counter\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    countersList: state.countersList,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    counterAdd: counterAdd\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddCounterForm);","import AddCounterForm from \"./add-counter-form\";\r\n\r\nexport default AddCounterForm;","import React from \"react\";\r\nimport {counterAdd, counterResetAll} from \"../../redux/actions\";\r\nimport {connect} from \"react-redux\";\r\n\r\nfunction CountersTotal(props) {\r\n\r\n    const countersTotalValue = () => {\r\n        return  props.countersList.reduce((acc,cur)=> acc+cur.counterValue, 0)\r\n    };\r\n\r\n    return (\r\n        <div className=\"input-group m-3 mr-8 \">\r\n            <span className=\"form-control col-sm-3\"> Counters Total:</span>\r\n            <span className=\"form-control col-sm-9\">{countersTotalValue()}</span>\r\n            <div className=\"input-group-append pr-3 mr-3\">\r\n                <button className=\"btn btn-primary\" type=\"button\"\r\n                      onClick={props.countersResetAll} >Reset All\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    countersList: state.countersList,\r\n    total: state.countersTotalValue\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    counterAdd: counterAdd,\r\n    countersResetAll: counterResetAll,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CountersTotal);","import React from 'react';\nimport './App.css';\nimport CountersList from \"../counters-list\";\nimport ConfirmationDelete from \"../delete-confirmation-modal\";\nimport AddCounterForm from \"../add-counter-form\";\nimport CountersTotal from \"../counters-total/counters-total\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <CountersTotal/>\n            <CountersList/>\n            <ConfirmationDelete/>\n            <AddCounterForm/>\n        </div>\n    );\n}\n\nexport default App;\n","import App from \"./App\";\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n    countersList: [\r\n        {\r\n            counterId: 97,\r\n            counterName: '1st counter',\r\n            counterValue: 1,\r\n            isVisibleEditButton: true,\r\n            isVisibleSaveButton: false,\r\n        },\r\n        {\r\n            counterId: 98,\r\n            counterName: '2d counter',\r\n            counterValue: 2,\r\n            isVisibleEditButton: true,\r\n            isVisibleSaveButton: false\r\n        },\r\n        {\r\n            counterId: 99,\r\n            counterName: '3d counter',\r\n            counterValue: 3,\r\n            isVisibleEditButton: true,\r\n            isVisibleSaveButton: false\r\n        }\r\n    ],\r\n    confirmCounter: {id: 0, name: ''},\r\n    countersTotalValue: '',\r\n};\r\n\r\nconst updateCounterValue = (state, counterId, arg) => {\r\n    const newList = [...state.countersList.map(el => {\r\n        if (el.counterId === counterId) {\r\n            if (arg === 'reset') {\r\n                return {...el, counterValue: 0}\r\n            } else\r\n                return {...el, counterValue: el.counterValue + arg}\r\n\r\n        } else {\r\n            return {...el}\r\n        }\r\n    })];\r\n    return {...state, countersList: newList}\r\n};\r\n\r\nconst counterResetAll = (state) => {\r\n    const newList = [\r\n        ...state.countersList.map(el => {\r\n            return {...el, counterValue: 0}\r\n        })\r\n    ];\r\n    return {...state, countersList: newList}\r\n};\r\n\r\nconst countersTotalValue = (state) => {\r\n    const countersList = [...state.countersList];\r\n    const total = countersList.reduce((acc, cur) => acc + cur.counterValue, 0);\r\n    return {...state, countersTotalValue: total}\r\n};\r\n\r\n\r\nconst removeCounterFromList = (state, counterId) => {\r\n    const newCountersList = state.countersList.filter(el => el.counterId !== counterId);\r\n    return {...state, countersList: newCountersList, confirmCounter: {id: 0, name: ''}}\r\n};\r\n\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\n\r\nconst addNewCounter = (state, counterName, counterValue) => {\r\n    const newCountersList = [...state.countersList];\r\n\r\n    newCountersList.push({\r\n        counterId: getRandomInt(100, 1000),\r\n        counterName: counterName,\r\n        counterValue: counterValue,\r\n        isVisibleEditButton: true,\r\n        isVisibleSaveButton: false\r\n    });\r\n    return {...state, countersList: newCountersList}\r\n};\r\n\r\nconst editCounterName = (state, counterId) => {\r\n    const newList = [...state.countersList.map(el => {\r\n        if (el.counterId === counterId) {\r\n            return {...el,  isVisibleEditButton: false, isVisibleSaveButton: true}\r\n        } else {\r\n            return {...el}\r\n        }\r\n    })\r\n    ];\r\n\r\n    return {\r\n        ...state,\r\n        countersList: newList\r\n    }\r\n};\r\n\r\nconst saveCounterName = (state, counterId, newCounterName) => {\r\n    const newList = [...state.countersList.map(el => {\r\n        if (el.counterId === counterId) {\r\n            return {...el, counterName: newCounterName,  isVisibleEditButton: true, isVisibleSaveButton: false}\r\n        } else {\r\n            return {...el}\r\n        }\r\n    })\r\n    ];\r\n    console.log('HERE SAVE newLIST', newList);\r\n    return {\r\n        ...state,\r\n        countersList: newList\r\n    }\r\n};\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'COUNTER_INC_ONE':\r\n            return updateCounterValue(state, action.payload, +1);\r\n\r\n        case 'COUNTER_DEC_ONE':\r\n            return updateCounterValue(state, action.payload, -1);\r\n\r\n        case 'COUNTER_RESET':\r\n            return updateCounterValue(state, action.payload, 'reset');\r\n\r\n        case 'COUNTER_RESET_ALL':\r\n            return counterResetAll(state);\r\n\r\n        case 'COUNTERS_TOTAL':\r\n            return countersTotalValue(state);\r\n\r\n        case 'COUNTER_DELETE_CONFIRM':\r\n            return {...state, confirmCounter: {id: action.payload.counterId, name: action.payload.counterName}};\r\n\r\n        case 'COUNTER_DELETE':\r\n            return removeCounterFromList(state, action.payload);\r\n\r\n        case 'COUNTER_DELETE_CANCEL':\r\n            return {...state, confirmCounter: {id: 0, name: ''}};\r\n\r\n        case 'COUNTER_ADD':\r\n            return addNewCounter(state, action.payload.counterName, action.payload.counterValue);\r\n\r\n        case 'COUNTER_EDIT_NAME':\r\n            return editCounterName(state, action.payload);\r\n\r\n        case 'COUNTER_SAVE_NAME':\r\n            return saveCounterName(state, action.payload.counterId, action.payload.counterName);\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import {createStore, applyMiddleware} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport reducer from './reducer';\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    composeWithDevTools(applyMiddleware(thunk)),\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from \"./components/app\";\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}