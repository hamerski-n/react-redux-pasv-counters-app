{"version":3,"sources":["components/counters-list-item/counters-list-item.js","components/counters-list-item/index.js","redux/actions.js","components/counters-list/counters-list.js","components/counters-list/index.js","components/delete-confirmation-modal/confirmation-delete.js","components/delete-confirmation-modal/index.js","components/add-counter-form/add-counter-form.js","components/add-counter-form/index.js","components/counters-total/counters-total.js","components/app/App.js","components/app/index.js","serviceWorker.js","redux/reducer.js","redux/store.js","index.js"],"names":["CountersListItem","props","console","log","className","counter","counterName","onClick","decrement","counterId","counterValue","increment","reset","removeConfirm","counterAdd","dispatch","type","payload","mapDispatchToProps","counterInc","counterDec","counterRes","counterDeleteConfirm","CountersList","connect","state","countersList","deleteConfirm","map","el","key","counterDelete","counterDeleteCancel","ConfirmationDelete","confirmCounter","useState","isDisabledDeleteConfirmationButton","setIsDisabledDeleteConfirmationButton","Modal","isOpen","Boolean","name","toggle","ModalHeader","ModalBody","Input","onChange","e","inputText","target","value","trim","toLowerCase","ModalFooter","Button","color","disabled","id","AddCounterForm","setName","setCounterValue","placeholder","alert","Number","countersResetAll","countersTotal","total","countersTotalValue","App","window","location","hostname","match","initialState","updateCounterValue","arg","newList","counterResetAll","reduce","acc","cur","removeCounterFromList","newCountersList","filter","addNewCounter","min","max","push","Math","ceil","floor","random","reducer","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fdee4d64.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './counters-list-item.css';\r\n\r\nfunction CountersListItem(props) {\r\n    console.log('props in Items', props);\r\n\r\n    return (\r\n        <div className='card m-3'>\r\n            <div className='card-body'>\r\n                <div className='row'>\r\n                    <div className='col-sm-4'>{props.counter.counterName} </div>\r\n                    <div className='col-sm-3'>\r\n                        <button className='btn btn-info mr-1'\r\n                                onClick={() => props.decrement(props.counter.counterId)}>-</button>\r\n                        {props.counter.counterValue}\r\n                        <button className='btn btn-info ml-1'\r\n                                onClick={() => props.increment(props.counter.counterId)}>+\r\n                        </button>\r\n                    </div>\r\n                    <div className='col-sm-4'>\r\n                        <button className='btn btn-warning mr-1'\r\n                                onClick={() => props.reset(props.counter.counterId)}>Reset</button>\r\n                        <button className='btn btn-secondary mr-1'>Edit</button>\r\n                        <button className='btn btn-danger mr-1'\r\n                                onClick={() => props.removeConfirm(props.counter)}>Delete</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CountersListItem;","import CountersListItem from \"./counters-list-item\";\r\n\r\nexport default CountersListItem;","export function counterIncOne(counterId) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'COUNTER_INC_ONE', payload: counterId})\r\n    }\r\n}\r\n\r\nexport function counterDecOne(counterId) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'COUNTER_DEC_ONE', payload: counterId})\r\n    }\r\n}\r\n\r\nexport function counterReset(counterId) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'COUNTER_RESET', payload: counterId})\r\n    }\r\n}\r\n\r\nexport function counterResetAll() {\r\n    return (dispatch) => {\r\n        dispatch({type: 'COUNTER_RESET_ALL'})\r\n    }\r\n}\r\n\r\nexport function countersTotal() {\r\n    return (dispatch) => {\r\n        dispatch({type: 'COUNTERS_TOTAL'})\r\n    }\r\n}\r\n\r\nexport function counterDeleteConfirm(counter) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'COUNTER_DELETE_CONFIRM', payload: counter})\r\n    }\r\n}\r\n\r\nexport function counterDelete(counterId) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'COUNTER_DELETE', payload: counterId})\r\n    }\r\n}\r\nexport function counterDeleteCancel(counterId) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'COUNTER_DELETE_CANCEL', payload: counterId})\r\n    }\r\n}\r\n\r\nexport function counterAdd(counterName,counterValue) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'COUNTER_ADD', payload: {counterName,counterValue}})\r\n    }\r\n}","import React from \"react\";\r\nimport CountersListItem from \"../counters-list-item\";\r\nimport {counterDecOne, counterDeleteConfirm, counterIncOne, counterReset} from \"../../redux/actions\";\r\nimport {connect} from \"react-redux\";\r\n\r\nfunction CountersList(props) {\r\n    console.log('List countersList', props.countersList);\r\n    return (\r\n        <>\r\n            {\r\n                props.countersList.map((el) => <CountersListItem\r\n                        key={el.counterId}\r\n                        counter={el}\r\n                        increment={props.counterInc}\r\n                        decrement={props.counterDec}\r\n                        reset={props.counterRes}\r\n                        removeConfirm={props.counterDeleteConfirm}\r\n                    />\r\n                )\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    countersList: state.countersList,\r\n    deleteConfirm: state.deleteConfirm\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    counterInc: counterIncOne,\r\n    counterDec: counterDecOne,\r\n    counterRes: counterReset,\r\n    counterDeleteConfirm: counterDeleteConfirm,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CountersList);","import CountersList from \"./counters-list\";\r\n\r\nexport default CountersList;","import React, {useState} from 'react';\r\nimport {Button, Modal, ModalHeader, ModalBody, ModalFooter} from 'reactstrap';\r\nimport Input from \"reactstrap/es/Input\";\r\nimport {counterDelete, counterDeleteCancel} from \"../../redux/actions\";\r\nimport {connect} from \"react-redux\";\r\n\r\nfunction ConfirmationDelete(props) {\r\n\r\n    const [isDisabledDeleteConfirmationButton, setIsDisabledDeleteConfirmationButton] = useState(true);\r\n\r\n    const modalConfirmationUserInputChange = (e) => {\r\n    const inputText = e.target.value;\r\n    setIsDisabledDeleteConfirmationButton( inputText.trim().toLowerCase() !== props.confirmCounter.name.trim().toLowerCase());\r\n    };\r\n\r\n    const deleteButtonClick = () => {\r\n        props.counterDelete(props.confirmCounter.id);\r\n        setIsDisabledDeleteConfirmationButton(true);\r\n    };\r\n\r\n    const cancelButtonClick = () => {\r\n        props.counterDeleteCancel();\r\n        setIsDisabledDeleteConfirmationButton(true);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Modal isOpen={Boolean(props.confirmCounter.name)} toggle={props.counterDeleteCancel}>\r\n                <ModalHeader>Delete confirmation</ModalHeader>\r\n                <ModalBody>\r\n                    Enter counter name <strong>{props.confirmCounter.name}</strong> to delete it\r\n                    <Input onChange={modalConfirmationUserInputChange}/>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"danger\"\r\n                            disabled={isDisabledDeleteConfirmationButton}\r\n                            onClick={deleteButtonClick}\r\n                    >Delete</Button>{' '}\r\n                    <Button color=\"secondary\"\r\n                            onClick={cancelButtonClick}\r\n                    >Cancel</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    countersList: state.countersList,\r\n    confirmCounter: state.confirmCounter,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    counterDelete: counterDelete,\r\n    counterDeleteCancel: counterDeleteCancel\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmationDelete);","import ConfirmationDelete from \"./confirmation-delete\";\r\n\r\nexport default ConfirmationDelete;","import React, {useState} from \"react\";\r\nimport {counterAdd} from \"../../redux/actions\";\r\nimport {connect} from \"react-redux\";\r\n\r\nfunction AddCounterForm(props) {\r\n\r\n    const [name, setName] = useState('');\r\n    const [counterValue, setCounterValue] = useState('');\r\n\r\n    const onSubmit = () => {\r\n        if (name === '') {\r\n            alert('Please add a counter name')\r\n        } else {\r\n            props.counterAdd(name, Number(counterValue));\r\n            setName('');\r\n            setCounterValue('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"input-group m-3 mr-8 \">\r\n            <input type=\"text\" className=\"form-control col-sm-9\" placeholder=\"Counter name\"\r\n                   value={name} onChange={e => setName(e.target.value)}/>\r\n            <input type=\"text\" className=\"form-control col-sm-3\" placeholder=\"Counter value\"\r\n                   value={counterValue} onChange={e => setCounterValue(e.target.value)}/>\r\n            <div className=\"input-group-append pr-3 mr-3\">\r\n                <button className=\"btn btn-primary\" type=\"button\"\r\n                        onClick={() => onSubmit(name, counterValue)}>Add counter\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    countersList: state.countersList,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    counterAdd: counterAdd\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddCounterForm);","import AddCounterForm from \"./add-counter-form\";\r\n\r\nexport default AddCounterForm;","import React from \"react\";\r\nimport {counterAdd, counterResetAll, countersTotal} from \"../../redux/actions\";\r\nimport {connect} from \"react-redux\";\r\n\r\nfunction CountersTotal(props) {\r\n\r\n    // const countersTotalValue = (state) => {\r\n    //     return  props.countersList.reduce((acc,cur)=> acc+cur.counterValue, 0)\r\n    // };\r\n\r\n    return (\r\n        <div className=\"input-group m-3 mr-8 \">\r\n            {/*total: {countersTotalValue()}*/}\r\n            <span type=\"text\" className=\"form-control col-sm-3\"> Counters Total:</span>\r\n            <span type=\"text\" className=\"form-control col-sm-9\">{props.countersTotal()}{props.total}</span>\r\n            <div className=\"input-group-append pr-3 mr-3\">\r\n                <button className=\"btn btn-primary\" type=\"button\"\r\n                      onClick={props.countersResetAll} >Reset All\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    countersList: state.countersList,\r\n    total: state.countersTotalValue\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    counterAdd: counterAdd,\r\n    countersResetAll: counterResetAll,\r\n    countersTotal: countersTotal\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CountersTotal);","import React from 'react';\nimport './App.css';\nimport CountersList from \"../counters-list\";\nimport ConfirmationDelete from \"../delete-confirmation-modal\";\nimport AddCounterForm from \"../add-counter-form\";\nimport CountersTotal from \"../counters-total/counters-total\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <CountersTotal/>\n            <CountersList/>\n            <ConfirmationDelete/>\n            <AddCounterForm/>\n        </div>\n    );\n}\n\nexport default App;\n","import App from \"./App\";\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nconst initialState = {\r\n    countersList: [\r\n        {counterId: 97, counterName: '1st counter', counterValue: 1},\r\n        {counterId: 98, counterName: '2d counter', counterValue: 2},\r\n        {counterId: 99, counterName: '3d counter', counterValue: 3}\r\n    ],\r\n    confirmCounter: {id: 0, name: ''},\r\n    countersTotalValue: '',\r\n};\r\n\r\nconst updateCounterValue = (state, counterId, arg) => {\r\n    const newList = [...state.countersList.map(el => {\r\n        if (el.counterId === counterId) {\r\n            if (arg === 'reset') {\r\n                return {...el, counterValue: 0}\r\n            } else\r\n                return {...el, counterValue: el.counterValue + arg}\r\n\r\n        } else {\r\n            return {...el}\r\n        }\r\n    })];\r\n    return {...state, countersList: newList}\r\n};\r\n\r\nconst counterResetAll = (state) => {\r\n    const newList = [\r\n        ...state.countersList.map(el => {\r\n            return {...el, counterValue: 0}\r\n        })\r\n    ];\r\n    return {...state, countersList: newList}\r\n};\r\n\r\nconst countersTotalValue = (state) => {\r\n    const countersList=[...state.countersList];\r\n    const total = countersList.reduce((acc,cur)=> acc+cur.counterValue, 0);\r\n    return  {...state, countersTotalValue: total}\r\n};\r\n\r\n\r\nconst removeCounterFromList = (state, counterId) => {\r\n    const newCountersList = state.countersList.filter(el => el.counterId !== counterId);\r\n    return {...state, countersList: newCountersList, confirmCounter: {id: 0, name: ''}}\r\n};\r\n\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\n\r\nconst addNewCounter = (state, counterName, counterValue) => {\r\n    const newCountersList = [...state.countersList];\r\n\r\n    newCountersList.push({\r\n        counterId: getRandomInt(100, 1000),\r\n        counterName: counterName,\r\n        counterValue: counterValue\r\n    });\r\n    return {...state, countersList: newCountersList}\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'COUNTER_INC_ONE':\r\n            return updateCounterValue(state, action.payload, +1);\r\n\r\n        case 'COUNTER_DEC_ONE':\r\n            return updateCounterValue(state, action.payload, -1);\r\n\r\n        case 'COUNTER_RESET':\r\n            return updateCounterValue(state, action.payload, 'reset');\r\n\r\n        case 'COUNTER_RESET_ALL':\r\n            return counterResetAll(state);\r\n\r\n        case 'COUNTERS_TOTAL':\r\n            return countersTotalValue(state);\r\n\r\n        case 'COUNTER_DELETE_CONFIRM':\r\n            return {...state, confirmCounter: {id: action.payload.counterId, name: action.payload.counterName}};\r\n\r\n        case 'COUNTER_DELETE':\r\n            return removeCounterFromList(state, action.payload);\r\n\r\n        case 'COUNTER_DELETE_CANCEL':\r\n            return {...state, confirmCounter: {id: 0, name: ''}};\r\n\r\n        case 'COUNTER_ADD':\r\n            return addNewCounter(state, action.payload.counterName, action.payload.counterValue);\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import {createStore, applyMiddleware} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport reducer from './reducer';\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    composeWithDevTools(applyMiddleware(thunk)),\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from \"./components/app\";\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}